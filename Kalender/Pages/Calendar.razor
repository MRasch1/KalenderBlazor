@page "/calendar"
@using Google.Apis.Calendar.v3
@using Google.Apis.Calendar.v3.Data
@using Google.Apis.Services

@inherits ComponentBase
@inject IJSRuntime JsRuntime

<div>
    <h3>Calendar with Holidays</h3>

    <div>
        <button @onkeydown="HandleKeyPress_Left" @onclick="GoToPreviousWeek">Previous Week</button>
        <button @onkeydown="HandleKeyPress_Right" @onclick=" GoToNextWeek">Next Week</button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Day of the Week</th>
                <th>Holiday</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dayOfWeek in Enumerable.Range(0, 14))
            {
                var currentDate = DisplayedWeekStartDate.AddDays(dayOfWeek);
                var isHoliday = IsHoliday(currentDate);

                <tr>
                    <td>@currentDate.ToString("dd-MM-yyyy")</td>
                    <td>@currentDate.DayOfWeek</td>
                    <td>@(isHoliday ? GetHolidayName(currentDate) : "")</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    const string ApiKey = "AIzaSyAfRLnIqo-P40tgSPqfGdzUwO1NQA-SAE4";
    const string CalendarId = "da.danish#holiday@group.v.calendar.google.com";
    List<Event> Holidays = new List<Event>();
    DateTime DisplayedWeekStartDate = DateTime.Now; // Initially, display the current week.

    protected override async Task OnInitializedAsync()
    {

        try
        {
            var service = new CalendarService(new BaseClientService.Initializer()
                {
                    ApiKey = ApiKey,
                    ApplicationName = "Blazor Google Calendar Example"
                });

            var request = service.Events.List(CalendarId);
            request.Fields = "items(summary,start,end)";
            var response = await request.ExecuteAsync();
            Holidays = response.Items.ToList();


            await JsRuntime.InvokeVoidAsync("customFunctions.addEventListener", (Func<KeyboardEventArgs, Task>)HandleKeyPress_Left);
        }
        catch (Exception ex)
        {
            // Handle exceptions or log errors here.
            Console.WriteLine(ex.Message);
        }

    }

    private bool IsHoliday(DateTime date)
    {
        foreach (var holiday in Holidays)
        {
            if (!string.IsNullOrWhiteSpace(holiday.Start?.Date))
            {
                if (DateTime.TryParse(holiday.Start.Date, out DateTime holidayDate))
                {
                    if (date.Date == holidayDate.Date)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private string GetHolidayName(DateTime date)
    {
        foreach (var holiday in Holidays)
        {
            if (!string.IsNullOrWhiteSpace(holiday.Start?.Date))
            {
                if (DateTime.TryParse(holiday.Start.Date, out DateTime holidayDate))
                {
                    if (date.Date == holidayDate.Date)
                    {
                        return holiday.Summary ?? "";
                    }
                }
            }
        }
        return "";
    }

    private async Task GoToPreviousWeek()
    {
        DisplayedWeekStartDate = DisplayedWeekStartDate.AddDays(-14);
        await Task.Delay(1000);
        StateHasChanged();
    }

    private async Task GoToNextWeek()
    {
        DisplayedWeekStartDate = DisplayedWeekStartDate.AddDays(14);
        await Task.Delay(1000);
        StateHasChanged();
    }


    private async Task HandleKeyPress_Left(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowLeft")
        {
            await GoToPreviousWeek();
        }
    }

    private async Task HandleKeyPress_Right(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowRight")
        {
            await GoToNextWeek();
        }
    }

    // Remove the event listener when the component is disposed.
    public async ValueTask DisposeAsync()
    {
        await JsRuntime.InvokeVoidAsync("removeEventListener", "keydown", (Func<KeyboardEventArgs, Task>)HandleKeyPress_Left);
    }


    }
