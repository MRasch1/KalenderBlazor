@page "/calendar"
@using Google.Apis.Calendar.v3
@using Google.Apis.Calendar.v3.Data
@using Google.Apis.Services

@inherits ComponentBase

<div>
    <h3>Weekly Calendar with Holidays</h3>

    <div>
        <button @onclick="GoToPreviousWeek">Previous Week</button>
        <button @onclick="GoToNextWeek">Next Week</button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Day of the Week</th>
                <th>Holiday</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dayOfWeek in Enumerable.Range(0, 14))
            {
                var currentDate = DisplayedWeekStartDate.AddDays(dayOfWeek);
                var isHoliday = IsHoliday(currentDate);

                <tr>
                    <td>@currentDate.ToString("dd-MM-yyyy")</td>
                    <td>@currentDate.DayOfWeek</td>
                    <td>@(isHoliday ? GetHolidayName(currentDate) : "")</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    const string ApiKey = "AIzaSyAfRLnIqo-P40tgSPqfGdzUwO1NQA-SAE4";
    const string CalendarId = "da.danish#holiday@group.v.calendar.google.com";
    List<Event> Holidays = new List<Event>();
    DateTime DisplayedWeekStartDate = DateTime.Now; // Initially, display the current week.

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var service = new CalendarService(new BaseClientService.Initializer()
                {
                    ApiKey = ApiKey,
                    ApplicationName = "Blazor Google Calendar Example"
                });

            var request = service.Events.List(CalendarId);
            request.Fields = "items(summary,start,end)";
            var response = await request.ExecuteAsync();
            Holidays = response.Items.ToList();
        }
        catch (Exception ex)
        {
            // Handle exceptions or log errors here.
            Console.WriteLine(ex.Message);
        }
    }

    private bool IsHoliday(DateTime date)
{
    foreach (var holiday in Holidays)
    {
        if (!string.IsNullOrWhiteSpace(holiday.Start?.Date))
        {
            if (DateTime.TryParse(holiday.Start.Date, out DateTime holidayDate))
            {
                if (date.Date == holidayDate.Date)
                {
                    return true;
                }
            }
        }
    }
    return false;
}

private string GetHolidayName(DateTime date)
{
    foreach (var holiday in Holidays)
    {
        if (!string.IsNullOrWhiteSpace(holiday.Start?.Date))
        {
            if (DateTime.TryParse(holiday.Start.Date, out DateTime holidayDate))
            {
                if (date.Date == holidayDate.Date)
                {
                    return holiday.Summary ?? "";
                }
            }
        }
    }
    return "";
}

private void GoToPreviousWeek()
    {
        DisplayedWeekStartDate = DisplayedWeekStartDate.AddDays(-14);
    }

    private void GoToNextWeek()
    {
        DisplayedWeekStartDate = DisplayedWeekStartDate.AddDays(14);
    }


}
