@page "/calendar"
@using Google.Apis.Calendar.v3
@using Google.Apis.Calendar.v3.Data
@using Google.Apis.Services
@using Kalender.Data

@inherits ComponentBase
@inject IJSRuntime JsRuntime
@inject PersonService personService

<div>

    @if (personObj is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h3>Calendar with Holidays and Birthdays</h3>

        <div>
            <button @onkeydown="HandleKeyPress_Left" @onclick="GoToPreviousWeek">Previous Week</button>
            <button @onkeydown="HandleKeyPress_Right" @onclick=" GoToNextWeek">Next Week</button>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Day of the Week</th>
                    <th>Holiday</th>
                    <th>Persons</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dayOfWeek in Enumerable.Range(0, 7))
                {
                    var currentDate = DisplayedWeekStartDate.AddDays(dayOfWeek);
                    var isHoliday = IsHoliday(currentDate);

                    <tr>
                        <td class="@((currentDate == DateTime.Now.Date) ? "current-day" : "")">@currentDate.ToString("dd-MM-yyyy")</td>
                        <td>@currentDate.DayOfWeek</td>
                        <td class="@((isHoliday == true) ? "its-holiday" : "")">@(isHoliday ? GetHolidayName(currentDate) : "")</td>
                        <td>
                            @foreach (var person in personObj)
                            {
                                @if (currentDate.DayOfYear == person.Fødselsdato.DayOfYear)
                                {
                                    <div>@person.Fornavn @person.Efternavn (Birthday: @person.Fødselsdato.Date.ToShortDateString()) Alder blevet: @(currentDate.Year - person.Fødselsdato.Year)</div>
                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>

            
        </table>

        <style>

            .current-day {
                border-style: ridge;
                font-weight: bold;
                border-width: 3px;
                border-top-width: 3px;
                border-color: lightsteelblue;
            }

            .its-holiday {
                border-style: ridge;
                font-weight: bold;
                border-width: 3px;
                border-top-width: 3px;
                border-color: forestgreen;
            }

        </style>
    }

</div>


@code {
    const string ApiKey = "AIzaSyAfRLnIqo-P40tgSPqfGdzUwO1NQA-SAE4";
    const string CalendarId = "da.danish#holiday@group.v.calendar.google.com";
    List<Event> Holidays = new List<Event>();
    List<Person> ?personObj;
    DateTime DisplayedWeekStartDate = DateTime.Now.Date;


    protected override async Task OnInitializedAsync()
    {
        DisplayedWeekStartDate = StartFromMonday();
        await LoadData();
    }

    private DateTime StartFromMonday()
    {        
        DateTime DisplayedWeekStartDate = DateTime.Now.Date;
        int daysUntilMonday = (7 + (int)DisplayedWeekStartDate.DayOfWeek - (int)DayOfWeek.Monday) % 7;
        DisplayedWeekStartDate = DisplayedWeekStartDate.AddDays(-daysUntilMonday);

        return DisplayedWeekStartDate;
    }

    private async Task LoadData()
    {
        personObj = await Task.Run(() => personService.GetAllPersons());

        try
        {

            var service = new CalendarService(new BaseClientService.Initializer()
                {
                    ApiKey = ApiKey,
                    ApplicationName = "Blazor Google Calendar Example"
                });

            var request = service.Events.List(CalendarId);
            request.Fields = "items(summary,start,end)";
            var response = await request.ExecuteAsync();
            Holidays = response.Items.ToList();


            await JsRuntime.InvokeVoidAsync("customFunctions.addEventListener", (Func<KeyboardEventArgs, Task>)HandleKeyPress_Left);
            await JsRuntime.InvokeVoidAsync("customFunctions.addEventListener", (Func<KeyboardEventArgs, Task>)HandleKeyPress_Right);

        }
        catch (Exception ex)
        {
            // Handle exceptions or log errors here.
            Console.WriteLine(ex.Message);
        }
    }

    private bool IsHoliday(DateTime date)
    {
        foreach (var holiday in Holidays)
        {
            if (!string.IsNullOrWhiteSpace(holiday.Start?.Date))
            {
                if (DateTime.TryParse(holiday.Start.Date, out DateTime holidayDate))
                {
                    if (date.Date == holidayDate.Date)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private string GetHolidayName(DateTime date)
    {
        foreach (var holiday in Holidays)
        {
            if (!string.IsNullOrWhiteSpace(holiday.Start?.Date))
            {
                if (DateTime.TryParse(holiday.Start.Date, out DateTime holidayDate))
                {
                    if (date.Date == holidayDate.Date)
                    {
                        return holiday.Summary ?? "";
                    }
                }
            }
        }
        return "";
    }

    private async Task GoToPreviousWeek()
    {
        DisplayedWeekStartDate = DisplayedWeekStartDate.AddDays(-7);
        await Task.Delay(1000);
        StateHasChanged();
    }

    private async Task GoToNextWeek()
    {
        DisplayedWeekStartDate = DisplayedWeekStartDate.AddDays(7);
        await Task.Delay(1000);
        StateHasChanged();
    }

    private async Task HandleKeyPress_Left(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowLeft")
        {
            await GoToPreviousWeek();
        }
    }

    private async Task HandleKeyPress_Right(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowRight")
        {
            await GoToNextWeek();
        }
    }

    // Remove the event listener when the component is disposed.
    public async ValueTask DisposeAsync()
    {
        await JsRuntime.InvokeVoidAsync("removeEventListener", "keydown", (Func<KeyboardEventArgs, Task>)HandleKeyPress_Left);
        await JsRuntime.InvokeVoidAsync("removeEventListener", "keydown", (Func<KeyboardEventArgs, Task>)HandleKeyPress_Right);
    }
}
